<?php
/**
 * The public-facing REST API for the plugin.
 *
 * @link    https://mytiki.com
 * @since   1.0.0
 *
 * @package    Tiki_Woo
 * @subpackage Tiki_Woo/public
 */

/**
 * The public-facing REST API for the plugin.
 *
 * Defines the plugin name, version, and two examples hooks for how to
 * enqueue the public-facing stylesheet and JavaScript.
 *
 * @package    Tiki_Woo
 * @subpackage Tiki_Woo/public
 */
class Tiki_Woo_Rest_Api {

	public function register_rest_routes() {
		register_rest_route(
			'tiki/v1/woocommerce',
			'loyalty/grant',
			array(
				'methods'  => 'post',
				'callback' => array(
					$this,
					'grant_points',
				),
			)
		);
		register_rest_route(
			'tiki/v1/woocommerce',
			'loyalty/remove',
			array(
				'methods'  => 'post',
				'callback' => array(
					$this,
					'remove_points',
				),
			)
		);
		register_rest_route(
			'tiki/v1/woocommerce',
			'coupon/create',
			array(
				'methods'  => 'post',
				'callback' => array(
					$this,
					'create_coupon',
				),
			)
		);
		register_rest_route(
			'tiki/v1/woocommerce',
			'coupon/delete',
			array(
				'methods'  => 'post',
				'callback' => array(
					$this,
					'remove_coupon',
				),
			)
		);
	}

	public function grant_points( WP_REST_Request $request ) {

		$options = wp_parse_args(
			get_option( 'tiki_woo_loyalty' ),
			array(
				'reward_points' => '10',
			)
		);

		$current_user = wp_get_current_user();
		if ( 0 === $current_user->ID ) {
			return new WP_REST_Response( array( 'error' => 'User not logged in.' ), 400 );
		}
		$points = $options['reward_points'];
		update_user_meta( $current_user->ID, 'tiki_woocommerce_loyalty_points', $points );
		return new WP_REST_Response( array( 'message' => "$points points granted" ), 200 );
	}

	public function remove_points() {
		$current_user = wp_get_current_user();
		if ( ! $current_user ) {
			return WP_REST_Response( array( 'error' => 'User not logged in.' ), 400 );
		}
		update_user_meta( $current_user->ID, 'tiki_woocommerce_loyalty_points', 0 );
		return new WP_REST_Response( array( 'message' => 'points removed' ), 200 );
	}

	/**
	 * Create a Coupon Programmatically
	 *
	 * @param WP_REST_Request $request The WP REST API request.
	 */
	public function create_coupon( WP_REST_Request $request ) {
		$options = wp_parse_args(
			get_option( 'tiki_woo_coupons' ),
			array(
				'discount_type'  => 'percent',
				'discount_value' => '10',
			)
		);

		$current_user = wp_get_current_user();
		if ( 0 === $current_user->ID ) {
			return new WP_REST_Response( array( 'error' => 'User not logged in.' ), 400 );
		}
		$tiki_user_id = get_user_meta( $current_user->ID, '_tiki_user_id', true );
		$code         = substr( $tiki_user_id, 0, 10 );
		$coupon       = new WC_Coupon( $code );
		$coupon->set_email_restrictions( array( $current_user->user_email ) );
		$coupon->set_description( 'TIKI WooCommerce autogenerated coupon' );
		$coupon->set_discount_type( $options['discount_type'] );
		$coupon->set_amount( $options['discount_value'] );
		$coupon->save();
		return new WP_REST_Response( array( 'coupon' => $code ), 200 );
	}

	/**
	 * Remove a coupon
	 */
	public function remove_coupon() {
		$current_user = wp_get_current_user();
		if ( ! $current_user ) {
			return WP_REST_Response( array( 'error' => 'User not logged in.' ), 400 );
		}
		$tiki_user_id = get_user_meta( $current_user->ID, '_tiki_user_id', true );
		$coupon       = new WC_Coupon( substr( $tiki_user_id, 0, 10 ) );
		if ( ! empty( $coupon->id ) ) {
			wp_delete_post( $coupon->id );
		}
		return new WP_REST_Response( array( 'message' => 'coupon removed' ), 200 );
	}
}
